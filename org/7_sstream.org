#+TITLE: Simplify Mystery Code with Classes
#+AUTHOR: Marcus Birkenkrahe (pledged)
#+SUBTITLE: CSC 450 Programming Seminar Lyon College Fall 2025
#+STARTUP: overview hideblocks indent entitiespretty:
* Task

- Simplify the program:
  1) Remove references and pointers, make member functions "normal".
  2) Check if you need all functions, especially global ones.
  3) Remove the string stream and print the data as a normal string.

- Get the file from GitHub: https://tinyurl.com/player-cpp

  #+begin_src C++ :results output :tangle ../src/Player.cpp
    #include <iostream>
    #include <string>
    #include <sstream>
    using namespace std;

    class Player {
    private:
      string name;
      int hp;
      int ammo;
      int x, y;

      int clamp(int v, int lo, int hi) {
        if (v < lo) return lo;
        if (v > hi) return hi;
        return v;
      }

    public:
      Player(string n, int h, int a)
        : name(n), hp(clamp(h,0,100)), ammo(a), x(0), y(0) {}

      Player& move(int dx, int dy) {
        x += dx; y += dy;
        return *this;
      }

      Player& fire(int rounds) {
        ammo -= rounds;
        if (ammo < 0) ammo = 0;
        return *this;
      }

      Player& take_damage(int dmg) {
        hp = clamp(hp - dmg, 0, 100);
        return *this;
      }

      Player& reload(int rounds) {
        ammo += rounds;
        return *this;
      }

      Player& heal(int pts) {
        hp = clamp(hp + pts, 0, 100);
        return *this;
      }

      string status() const {
        ostringstream os;
        os << name << " HP=" << hp
           << "  Ammo=" << ammo
           << " Pos=(" << x << "," << y << ")";
        return os.str();
      }
    };

    int main() {
      Player p{"Daniels", 100, 30};
      cout << p.status() << "\n";
      p.move(1,0).fire(10).take_damage(25).reload(15).heal(10);
      cout << p.status() << "\n";
    }
  #+end_src

* Simplified Program

The changes:

1) The ~global~ =clamp= function is not needed.
2) The ~string~ stream header file is not needed.
3) All member functions become ~void~.
4) You can no longer chain methods.

#+begin_src C++ :results output :main no :includes :exports both
  #include <iostream>
  //#include <string>
  using namespace std;

  class Player {
  private:
    string name;
    int hp;
    int ammo;
    int x, y;

  public:
    Player(string n, int h, int a) {
      name = n;
      hp = h;
      ammo = a;
      x = 0;
      y = 0;
    }

    void move(int dx, int dy) {
      x += dx;
      y += dy;
    }

    void fire(int rounds) {
      ammo -= rounds;
      if (ammo < 0)
        ammo = 0;
    }

    void take_damage(int dmg) {
      hp -= dmg;
      if (hp < 0)
        hp = 0;
    }

    void reload(int rounds) {
      ammo += rounds;
    }

    void heal(int pts) {
      hp += pts;
      if (hp > 100)
        hp = 100;
    }

    void status() const {
      cout << name << " HP=" << hp
           << " Ammo=" << ammo
           << " Pos=(" << x << "," << y << ")"
           << endl;
    }
  };

  int main() {
    Player p{"Daniels", 100, 30};
    p.status();
    p.move(1,0);
    p.fire(10);
    p.take_damage(25);
    p.reload(15);
    p.heal(10);
    p.status();
  }
#+end_src

#+RESULTS:
: Daniels HP=100 Ammo=30 Pos=(0,0)
: Daniels HP=85 Ammo=35 Pos=(1,0)
